3 Ways to interact To cloud
1. Web
2. API
3. SDK

Terraform - A single point of contact when it comes to multi/hybrid-cloud architecture/setup.

It enables users to define and provision a datacenter infrastructure using a high-level configuration language known as Hashicorp Configuration Language (HCL), or optionally JSON.

- Inra as a Code
- Serves as a Documentation

Once Downloaded ->
add the program to env:
alias terraform="path_to_terraform_executable"

OneTime Setup:
> terraform init

How to Run?
> terraform apply
~ Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Terraform uses Declarative language.
Python, Go and other languages are imperative language.

All the data is maintained in the terraform.tfstate file.

To destroy all the infra created by terraform.
> terraform destroy
~ Destroy complete! Resources: 1 destroyed.


Terraform works on concept of - Idempotent

To print (like print()) anything in terraform ..
output{
    value= "resouce_name"
}


sudo ln -s /home/ay/Downloads/applications/terraform_0.12.26_linux_amd64/terraform /usr/sbin/terraform

terraform apply -h
terraform destory -auto-approve

AWS command to list profiles

$aws configure list
$aws configure list-profiles

DryRun is always a good practise.
It will tell which all changes that particular code will do.

------------------------------------------------------------------------
$ terraform plan
------------------------------------------------------------------------
Output
--------------------------------------------------------------------
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.my_wc2_instance will be created
  + resource "aws_instance" "my_wc2_instance" {
      + ami                          = "ami-0732b62d310b80e97"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = (known after apply)
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------


Terraform works as per user's desire

It's very import to refresh our local code before we do any changes using "apply"
$terraform refresh

if would like to change the value of variable on the fly
Then,
terraform apply -var=my_var_name=new_value


The file will the "provider" is automatically treated as main file.

To inclue another .tf file

module "mytestmodule"{
    source = "folername"
    //We would have to initialize the module folder as well
}


Terraform Registry - https://registry.terraform.io/
Pre-Created several modules available